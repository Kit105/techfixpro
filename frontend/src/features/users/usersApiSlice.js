import {
    createSelector,
    createEntityAdapter
} from "@reduxjs/toolkit";
// createEntityAdapter is a function that takes an object with a selectId function and returns an object with a set of functions that can be used to manipulate the state of an entity collection
// createSelector is a function that takes an array of input selectors and a transform function and returns a memoized selector function


import { apiSlice } from "../../app/api/apiSlice"

const usersAdapter = createEntityAdapter({})

const initialState = usersAdapter.getInitialState()


// apiSlice.injectEndpoints(...): This is a method provided by Redux Toolkit's createApi function. It allows you to define endpoints for your API slice.

// getUsers: builder.query(...): This is defining an endpoint for getting users. builder.query is a method for defining a query endpoint, which is typically used for GET requests.

// query: () => '/users': This is defining the URL for the endpoint. When this query is run, it will make a GET request to /users.

// validateStatus: (response, result) => {...}: This is a function that checks the status of the response. It returns true if the status is 200 and there is no error, and false otherwise.

// keepUnusedDataFor: 5: This is an option that tells Redux Toolkit to keep unused data for 5 seconds before garbage collecting it.

// transformResponse: responseData => {...}: This is a function that transforms the response data before it's stored in Redux. In this case, it's mapping over the response data, changing _id to id for each user, and then using usersAdapter.setAll to store the users in Redux.

// providesTags: (result, error, arg) => {...}: This is a function that provides tags for the query. Tags are used by Redux Toolkit to automatically refetch data when it becomes invalidated. In this case, it's providing a tag for each user ID, as well as a tag for the list of all users.
export const usersApiSlice = apiSlice.injectEndpoints({
    endpoints: builder => ({
        getUsers: builder.query({
            query: () => '/users',
            validateStatus: (response, result) => {
                return response.status === 200 && !result.isError
            },
            keepUnusedDataFor: 5,
            transformResponse: responseData => {
                const loadedUsers = responseData.map(user => {
                    user.id = user._id
                    return user
                });
                return usersAdapter.setAll(initialState, loadedUsers)
            },
            providesTags: (result, error, arg) => {
                if (result?.ids) {
                    return [
                        { type: 'User', id: 'LIST' },
                        ...result.ids.map(id => ({ type: 'User', id }))
                    ]
                } else return [{ type: 'User', id: 'LIST' }]
            }
        }),
    }),
})

// export const { useGetUsersQuery } = usersApiSlice: This line is exporting a hook generated by Redux Toolkit's createAsyncThunk. This hook can be used in your components to fetch users data.

// export const selectUsersResult = usersApiSlice.endpoints.getUsers.select(): This line is creating and exporting a selector that returns the result object of the getUsers query.

// const selectUsersData = createSelector(...): This line is creating a memoized selector using Redux's createSelector function. This selector takes the result of selectUsersResult and returns the data property of the result, which is the normalized state object with ids and entities.

// export const { selectAll: selectAllUsers, selectById: selectUserById, selectIds: selectUserIds } = usersAdapter.getSelectors(...): This line is creating and exporting several selectors using the getSelectors method of usersAdapter. These selectors can be used to select all users, select a user by ID, and select all user IDs. The argument to getSelectors is a function that returns the users slice of state.
export const {
    useGetUsersQuery,
} = usersApiSlice

// returns the query result object
export const selectUsersResult = usersApiSlice.endpoints.getUsers.select()

// creates memoized selector
const selectUsersData = createSelector(
    selectUsersResult,
    usersResult => usersResult.data // normalized state object with ids & entities
)

//getSelectors creates these selectors and we rename them with aliases using destructuring
export const {
    selectAll: selectAllUsers,
    selectById: selectUserById,
    selectIds: selectUserIds
    // Pass in a selector that returns the users slice of state
} = usersAdapter.getSelectors(state => selectUsersData(state) ?? initialState)